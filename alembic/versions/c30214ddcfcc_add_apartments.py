"""add apartments

Revision ID: c30214ddcfcc
Revises: 90bde85bcc5a
Create Date: 2025-07-09 13:37:29.046342

"""

from alembic import op
import sqlalchemy as sa
import advanced_alchemy
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "c30214ddcfcc"
down_revision = "90bde85bcc5a"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "apartments",
        sa.Column(
            "user_id",
            sa.BigInteger().with_variant(sa.Integer(), "sqlite"),
            nullable=False,
        ),
        sa.Column(
            "floor_id",
            sa.BigInteger().with_variant(sa.Integer(), "sqlite"),
            nullable=True,
        ),
        sa.Column(
            "riser_id",
            sa.BigInteger().with_variant(sa.Integer(), "sqlite"),
            nullable=True,
        ),
        sa.Column("address", sa.String(), nullable=False),
        sa.Column("district", sa.String(), nullable=False),
        sa.Column("microdistrict", sa.String(), nullable=False),
        sa.Column("longitude", sa.Numeric(precision=6, scale=3), nullable=False),
        sa.Column("latitude", sa.Numeric(precision=6, scale=3), nullable=False),
        sa.Column(
            "technology",
            sa.Enum(
                "BRICK",
                "PANEL",
                "AERATED_CONCRETE",
                "FRAME",
                name="apartment_technology_enum",
            ),
            nullable=False,
        ),
        sa.Column(
            "ownership_type",
            sa.Enum(
                "PRIVATE",
                "STATE",
                "MUNICIPAL",
                "LEASEHOLD",
                "LONG_TERM_LEASE",
                "UNDER_CONSTRUCTION_SALE",
                "NEW_BUILDING_COMMISSIONED",
                "SECONDARY_MARKET",
                "COOPERATIVE",
                "INHERITANCE",
                name="apartment_ownership_type_enum",
            ),
            nullable=False,
        ),
        sa.Column(
            "property_type",
            sa.Enum(
                "RESIDENTIAL",
                "COMMERCIAL",
                "INDUSTRIAL",
                "LAND",
                name="apartment_property_type_enum",
            ),
            nullable=False,
        ),
        sa.Column(
            "bedrooms",
            sa.Enum(
                "STUDIO",
                "ONE",
                "TWO",
                "THREE_OR_MORE",
                "DUPLEX",
                name="apartment_bedrooms_enum",
            ),
            nullable=False,
        ),
        sa.Column(
            "bathrooms",
            sa.Enum("SEPARATE", "COMBINED", name="apartment_bathrooms_enum"),
            nullable=False,
        ),
        sa.Column("kitchen_area", sa.Numeric(precision=3, scale=1), nullable=False),
        sa.Column(
            "heating",
            sa.Enum(
                "CENTRAL",
                "INDIVIDUAL_GAS",
                "INDIVIDUAL_ELECTRIC",
                "AUTONOMOUS",
                name="apartment_heating_enum",
            ),
            nullable=False,
        ),
        sa.Column("has_balcony_or_loggia", sa.Boolean(), nullable=False),
        sa.Column("has_mortgage", sa.Boolean(), nullable=False),
        sa.Column(
            "commission_to_agent",
            sa.Enum("LOW", "MEDIUM", "HIGH", name="apartment_commission_enum"),
            nullable=False,
        ),
        sa.Column(
            "condition",
            sa.Enum(
                "EXCELLENT",
                "GOOD",
                "SATISFACTORY",
                "NEEDS_RENOVATION",
                "BAD",
                name="apartment_condition_enum",
            ),
            nullable=False,
        ),
        sa.Column(
            "finishing",
            sa.Enum(
                "NO_FINISHING",
                "ROUGH",
                "PARTIALLY",
                "PRE",
                "FULLY",
                name="apartment_finishing_enum",
            ),
            nullable=False,
        ),
        sa.Column(
            "rooms",
            sa.Enum(
                "ONE",
                "TWO",
                "THREE",
                "FOUR",
                "FIVE",
                "SIX",
                "SEVEN",
                "EIGHT",
                "NINE",
                "TEN",
                name="apartment_rooms_enum",
            ),
            nullable=False,
        ),
        sa.Column("area", sa.Numeric(precision=4, scale=1), nullable=False),
        sa.Column(
            "call_method",
            sa.Enum("SMS", "PHONE", "PHONE_AND_SMS", name="apartment_call_method_enum"),
            nullable=False,
        ),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column("price", sa.Integer(), nullable=False),
        sa.Column("scheme", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column(
            "id", sa.BigInteger().with_variant(sa.Integer(), "sqlite"), nullable=False
        ),
        sa.Column(
            "created_at",
            advanced_alchemy.types.datetime.DateTimeUTC(timezone=True),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            advanced_alchemy.types.datetime.DateTimeUTC(timezone=True),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["floor_id"],
            ["floors.id"],
            name=op.f("fk_apartments_floor_id_floors"),
            ondelete="SET NULL",
        ),
        sa.ForeignKeyConstraint(
            ["riser_id"],
            ["risers.id"],
            name=op.f("fk_apartments_riser_id_risers"),
            ondelete="SET NULL",
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
            name=op.f("fk_apartments_user_id_users"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_apartments")),
    )
    op.create_table(
        "apartments_gallery",
        sa.Column(
            "apartment_id",
            sa.BigInteger().with_variant(sa.Integer(), "sqlite"),
            nullable=False,
        ),
        sa.Column("photo", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column("order", sa.SmallInteger(), nullable=True),
        sa.Column(
            "id", sa.BigInteger().with_variant(sa.Integer(), "sqlite"), nullable=False
        ),
        sa.Column(
            "created_at",
            advanced_alchemy.types.datetime.DateTimeUTC(timezone=True),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            advanced_alchemy.types.datetime.DateTimeUTC(timezone=True),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["apartment_id"],
            ["apartments.id"],
            name=op.f("fk_apartments_gallery_apartment_id_apartments"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_apartments_gallery")),
        sa.UniqueConstraint("apartment_id", "order", name="uq_apartment_order"),
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("apartments_gallery")
    op.drop_table("apartments")
    # ### end Alembic commands ###
