"""init

Revision ID: a13c08b2fa71
Revises:
Create Date: 2025-07-15 12:44:16.160387

"""

from alembic import op
import sqlalchemy as sa
import advanced_alchemy


# revision identifiers, used by Alembic.
revision = "a13c08b2fa71"
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "notary",
        sa.Column("photo", sa.String(), nullable=True),
        sa.Column("first_name", sa.String(), nullable=False),
        sa.Column("last_name", sa.String(), nullable=False),
        sa.Column("email", sa.String(), nullable=False),
        sa.Column("phone", sa.String(), nullable=False),
        sa.Column(
            "id", sa.BigInteger().with_variant(sa.Integer(), "sqlite"), nullable=False
        ),
        sa.Column(
            "created_at",
            advanced_alchemy.types.datetime.DateTimeUTC(timezone=True),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            advanced_alchemy.types.datetime.DateTimeUTC(timezone=True),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_notary")),
    )
    op.create_table(
        "users",
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("photo", sa.String(), nullable=True),
        sa.Column("email", sa.String(), nullable=False),
        sa.Column("phone", sa.String(), nullable=False),
        sa.Column(
            "role",
            sa.Enum("BUILDER", "USER", "ADMIN", name="user_role_enum"),
            nullable=False,
        ),
        sa.Column("password", sa.String(), nullable=False),
        sa.Column(
            "id", sa.BigInteger().with_variant(sa.Integer(), "sqlite"), nullable=False
        ),
        sa.Column(
            "created_at",
            advanced_alchemy.types.datetime.DateTimeUTC(timezone=True),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            advanced_alchemy.types.datetime.DateTimeUTC(timezone=True),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_users")),
    )
    op.create_table(
        "agent_contacts",
        sa.Column(
            "user_id",
            sa.BigInteger().with_variant(sa.Integer(), "sqlite"),
            nullable=False,
        ),
        sa.Column("first_name", sa.String(), nullable=True),
        sa.Column("last_name", sa.String(), nullable=True),
        sa.Column("phone", sa.String(), nullable=True),
        sa.Column("email", sa.String(), nullable=True),
        sa.Column(
            "id", sa.BigInteger().with_variant(sa.Integer(), "sqlite"), nullable=False
        ),
        sa.Column(
            "created_at",
            advanced_alchemy.types.datetime.DateTimeUTC(timezone=True),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            advanced_alchemy.types.datetime.DateTimeUTC(timezone=True),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
            name=op.f("fk_agent_contacts_user_id_users"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_agent_contacts")),
        sa.UniqueConstraint("user_id", name=op.f("uq_agent_contacts_user_id")),
    )
    op.create_table(
        "balances",
        sa.Column(
            "user_id",
            sa.BigInteger().with_variant(sa.Integer(), "sqlite"),
            nullable=False,
        ),
        sa.Column("value", sa.Numeric(precision=12, scale=2), nullable=False),
        sa.Column(
            "id", sa.BigInteger().with_variant(sa.Integer(), "sqlite"), nullable=False
        ),
        sa.Column(
            "created_at",
            advanced_alchemy.types.datetime.DateTimeUTC(timezone=True),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            advanced_alchemy.types.datetime.DateTimeUTC(timezone=True),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
            name=op.f("fk_balances_user_id_users"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_balances")),
        sa.UniqueConstraint("user_id", name=op.f("uq_balances_user_id")),
    )
    op.create_table(
        "blacklist",
        sa.Column("user_id", sa.BigInteger(), nullable=True),
        sa.Column(
            "id", sa.BigInteger().with_variant(sa.Integer(), "sqlite"), nullable=False
        ),
        sa.Column(
            "created_at",
            advanced_alchemy.types.datetime.DateTimeUTC(timezone=True),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            advanced_alchemy.types.datetime.DateTimeUTC(timezone=True),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["user_id"], ["users.id"], name=op.f("fk_blacklist_user_id_users")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_blacklist")),
        sa.UniqueConstraint("user_id", name=op.f("uq_blacklist_user_id")),
    )
    op.create_table(
        "complexes",
        sa.Column(
            "user_id",
            sa.BigInteger().with_variant(sa.Integer(), "sqlite"),
            nullable=False,
        ),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("address", sa.String(), nullable=True),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column("longitude", sa.Numeric(precision=6, scale=3), nullable=True),
        sa.Column("latitude", sa.Numeric(precision=6, scale=3), nullable=True),
        sa.Column(
            "id", sa.BigInteger().with_variant(sa.Integer(), "sqlite"), nullable=False
        ),
        sa.Column(
            "created_at",
            advanced_alchemy.types.datetime.DateTimeUTC(timezone=True),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            advanced_alchemy.types.datetime.DateTimeUTC(timezone=True),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
            name=op.f("fk_complexes_user_id_users"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_complexes")),
        sa.UniqueConstraint("user_id", name=op.f("uq_complexes_user_id")),
    )
    op.create_table(
        "contacts",
        sa.Column(
            "user_id",
            sa.BigInteger().with_variant(sa.Integer(), "sqlite"),
            nullable=False,
        ),
        sa.Column("first_name", sa.String(), nullable=True),
        sa.Column("last_name", sa.String(), nullable=True),
        sa.Column("phone", sa.String(), nullable=False),
        sa.Column("email", sa.String(), nullable=False),
        sa.Column(
            "id", sa.BigInteger().with_variant(sa.Integer(), "sqlite"), nullable=False
        ),
        sa.Column(
            "created_at",
            advanced_alchemy.types.datetime.DateTimeUTC(timezone=True),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            advanced_alchemy.types.datetime.DateTimeUTC(timezone=True),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
            name=op.f("fk_contacts_user_id_users"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_contacts")),
        sa.UniqueConstraint("user_id", name=op.f("uq_contacts_user_id")),
    )
    op.create_table(
        "notification_settings",
        sa.Column(
            "user_id",
            sa.BigInteger().with_variant(sa.Integer(), "sqlite"),
            nullable=False,
        ),
        sa.Column("redirect_notifications_to_agent", sa.Boolean(), nullable=False),
        sa.Column(
            "notification_type",
            sa.Enum(
                "DISABLED", "ME", "AGENT", "ME_AND_AGENT", name="notification_type_enum"
            ),
            nullable=False,
        ),
        sa.Column(
            "id", sa.BigInteger().with_variant(sa.Integer(), "sqlite"), nullable=False
        ),
        sa.Column(
            "created_at",
            advanced_alchemy.types.datetime.DateTimeUTC(timezone=True),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            advanced_alchemy.types.datetime.DateTimeUTC(timezone=True),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
            name=op.f("fk_notification_settings_user_id_users"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_notification_settings")),
        sa.UniqueConstraint("user_id", name=op.f("uq_notification_settings_user_id")),
    )
    op.create_table(
        "subscriptions",
        sa.Column(
            "user_id",
            sa.BigInteger().with_variant(sa.Integer(), "sqlite"),
            nullable=False,
        ),
        sa.Column("is_auto_renewal", sa.Boolean(), nullable=False),
        sa.Column("expiry_date", sa.DateTime(), nullable=False),
        sa.Column(
            "id", sa.BigInteger().with_variant(sa.Integer(), "sqlite"), nullable=False
        ),
        sa.Column(
            "created_at",
            advanced_alchemy.types.datetime.DateTimeUTC(timezone=True),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            advanced_alchemy.types.datetime.DateTimeUTC(timezone=True),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
            name=op.f("fk_subscriptions_user_id_users"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_subscriptions")),
        sa.UniqueConstraint("user_id", name=op.f("uq_subscriptions_user_id")),
    )
    op.create_table(
        "advantages",
        sa.Column(
            "complex_id",
            sa.BigInteger().with_variant(sa.Integer(), "sqlite"),
            nullable=False,
        ),
        sa.Column("has_children_playground", sa.Boolean(), nullable=True),
        sa.Column("has_sports_field", sa.Boolean(), nullable=True),
        sa.Column("has_parking", sa.Boolean(), nullable=True),
        sa.Column("has_landscaped_area", sa.Boolean(), nullable=True),
        sa.Column("has_on_site_shops", sa.Boolean(), nullable=True),
        sa.Column("has_individual_heating", sa.Boolean(), nullable=True),
        sa.Column("has_balcony_or_loggia", sa.Boolean(), nullable=True),
        sa.Column("has_bicycle_field", sa.Boolean(), nullable=True),
        sa.Column("has_panoramic_windows", sa.Boolean(), nullable=True),
        sa.Column("is_close_to_sea", sa.Boolean(), nullable=True),
        sa.Column("is_close_to_school", sa.Boolean(), nullable=True),
        sa.Column("is_close_to_transport", sa.Boolean(), nullable=True),
        sa.Column(
            "id", sa.BigInteger().with_variant(sa.Integer(), "sqlite"), nullable=False
        ),
        sa.Column(
            "created_at",
            advanced_alchemy.types.datetime.DateTimeUTC(timezone=True),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            advanced_alchemy.types.datetime.DateTimeUTC(timezone=True),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["complex_id"],
            ["complexes.id"],
            name=op.f("fk_advantages_complex_id_complexes"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_advantages")),
        sa.UniqueConstraint("complex_id", name=op.f("uq_advantages_complex_id")),
    )
    op.create_table(
        "blocks",
        sa.Column(
            "complex_id",
            sa.BigInteger().with_variant(sa.Integer(), "sqlite"),
            nullable=False,
        ),
        sa.Column("no", sa.SmallInteger(), nullable=True),
        sa.Column(
            "id", sa.BigInteger().with_variant(sa.Integer(), "sqlite"), nullable=False
        ),
        sa.Column(
            "created_at",
            advanced_alchemy.types.datetime.DateTimeUTC(timezone=True),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            advanced_alchemy.types.datetime.DateTimeUTC(timezone=True),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["complex_id"],
            ["complexes.id"],
            name=op.f("fk_blocks_complex_id_complexes"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_blocks")),
        sa.UniqueConstraint("complex_id", "no", name="uq_complex_no"),
    )
    op.create_table(
        "complexes_gallery",
        sa.Column(
            "complex_id",
            sa.BigInteger().with_variant(sa.Integer(), "sqlite"),
            nullable=False,
        ),
        sa.Column("photo", sa.String(), nullable=False),
        sa.Column("order", sa.SmallInteger(), nullable=True),
        sa.Column(
            "id", sa.BigInteger().with_variant(sa.Integer(), "sqlite"), nullable=False
        ),
        sa.Column(
            "created_at",
            advanced_alchemy.types.datetime.DateTimeUTC(timezone=True),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            advanced_alchemy.types.datetime.DateTimeUTC(timezone=True),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["complex_id"],
            ["complexes.id"],
            name=op.f("fk_complexes_gallery_complex_id_complexes"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_complexes_gallery")),
        sa.UniqueConstraint("complex_id", "order", name="uq_complex_order"),
    )
    op.create_table(
        "documents",
        sa.Column(
            "complex_id",
            sa.BigInteger().with_variant(sa.Integer(), "sqlite"),
            nullable=False,
        ),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("file", sa.String(), nullable=False),
        sa.Column(
            "id", sa.BigInteger().with_variant(sa.Integer(), "sqlite"), nullable=False
        ),
        sa.Column(
            "created_at",
            advanced_alchemy.types.datetime.DateTimeUTC(timezone=True),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            advanced_alchemy.types.datetime.DateTimeUTC(timezone=True),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["complex_id"],
            ["complexes.id"],
            name=op.f("fk_documents_complex_id_complexes"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_documents")),
    )
    op.create_table(
        "formalization_and_payment_settings",
        sa.Column(
            "complex_id",
            sa.BigInteger().with_variant(sa.Integer(), "sqlite"),
            nullable=False,
        ),
        sa.Column(
            "formalization",
            sa.Enum(
                "NOTARY",
                "LEGAL_AGREEMENT",
                "STATE_REGISTRATION",
                "PRIVATE_AGREEMENT",
                name="formalization_and_payment_settings_formalization_enum",
            ),
            nullable=True,
        ),
        sa.Column(
            "billing_options",
            sa.Enum(
                "MORTGAGE",
                "CASH",
                "INSTALLMENT",
                "LEASING",
                "STATE_PROGRAM",
                name="formalization_and_payment_settings_billing_options_enum",
            ),
            nullable=True,
        ),
        sa.Column(
            "property_type",
            sa.Enum(
                "RESIDENTIAL",
                "COMMERCIAL",
                "INDUSTRIAL",
                "LAND",
                name="formalization_and_payment_settings_property_type_enum",
            ),
            nullable=True,
        ),
        sa.Column(
            "sum_in_contract",
            sa.Enum(
                "FULL",
                "PARTIAL",
                name="formalization_and_payment_settings_sum_in_contract_enum",
            ),
            nullable=True,
        ),
        sa.Column(
            "id", sa.BigInteger().with_variant(sa.Integer(), "sqlite"), nullable=False
        ),
        sa.Column(
            "created_at",
            advanced_alchemy.types.datetime.DateTimeUTC(timezone=True),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            advanced_alchemy.types.datetime.DateTimeUTC(timezone=True),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["complex_id"],
            ["complexes.id"],
            name=op.f("fk_formalization_and_payment_settings_complex_id_complexes"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint(
            "id", name=op.f("pk_formalization_and_payment_settings")
        ),
        sa.UniqueConstraint(
            "complex_id", name=op.f("uq_formalization_and_payment_settings_complex_id")
        ),
    )
    op.create_table(
        "infrastructures",
        sa.Column(
            "complex_id",
            sa.BigInteger().with_variant(sa.Integer(), "sqlite"),
            nullable=False,
        ),
        sa.Column(
            "status",
            sa.Enum(
                "UNDER_CONSTRUCTION",
                "BUILT",
                "COMMISSIONED",
                name="infrastructure_status_enum",
            ),
            nullable=True,
        ),
        sa.Column(
            "type",
            sa.Enum(
                "MULTI_APARTMENT",
                "TOWNHOUSE",
                "COTTAGE",
                "VILLA",
                name="infrastructure_type_enum",
            ),
            nullable=True,
        ),
        sa.Column(
            "infrastructure_class",
            sa.Enum(
                "ECONOMY",
                "COMFORT",
                "BUSINESS",
                "PREMIUM",
                "ELITE",
                name="infrastructure_class_enum",
            ),
            nullable=True,
        ),
        sa.Column(
            "technology",
            sa.Enum(
                "BRICK",
                "PANEL",
                "AERATED_CONCRETE",
                "FRAME",
                name="infrastructure_technology_enum",
            ),
            nullable=True,
        ),
        sa.Column(
            "territory",
            sa.Enum(
                "CLOSED_GUARDED",
                "CLOSED",
                "GUARDED",
                "OPEN",
                name="infrastructure_territory_enum",
            ),
            nullable=True,
        ),
        sa.Column("sea_distance", sa.Numeric(precision=6, scale=3), nullable=True),
        sa.Column(
            "utility_bills",
            sa.Enum(
                "INDIVIDUAL_METERS",
                "FIXED_RATE",
                "INCLUDED_IN_RENT",
                "SEPARATE_RECEIPTS",
                "CENTRALIZED",
                name="infrastructure_utility_bills_enum",
            ),
            nullable=True,
        ),
        sa.Column("ceiling_height", sa.Numeric(precision=3, scale=2), nullable=True),
        sa.Column("has_gas", sa.Boolean(), nullable=True),
        sa.Column(
            "heating",
            sa.Enum(
                "CENTRAL",
                "INDIVIDUAL_GAS",
                "INDIVIDUAL_ELECTRIC",
                "AUTONOMOUS",
                name="infrastructure_heating_enum",
            ),
            nullable=True,
        ),
        sa.Column(
            "sewerage",
            sa.Enum(
                "CENTRAL",
                "SEPTIC_TANK",
                "AUTONOMOUS",
                name="infrastructure_sewerage_enum",
            ),
            nullable=True,
        ),
        sa.Column(
            "water_supply",
            sa.Enum("CENTRAL", "WELL", name="infrastructure_water_supply_enum"),
            nullable=True,
        ),
        sa.Column(
            "id", sa.BigInteger().with_variant(sa.Integer(), "sqlite"), nullable=False
        ),
        sa.Column(
            "created_at",
            advanced_alchemy.types.datetime.DateTimeUTC(timezone=True),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            advanced_alchemy.types.datetime.DateTimeUTC(timezone=True),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["complex_id"],
            ["complexes.id"],
            name=op.f("fk_infrastructures_complex_id_complexes"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_infrastructures")),
        sa.UniqueConstraint("complex_id", name=op.f("uq_infrastructures_complex_id")),
    )
    op.create_table(
        "news",
        sa.Column(
            "complex_id",
            sa.BigInteger().with_variant(sa.Integer(), "sqlite"),
            nullable=False,
        ),
        sa.Column("title", sa.String(), nullable=False),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column(
            "id", sa.BigInteger().with_variant(sa.Integer(), "sqlite"), nullable=False
        ),
        sa.Column(
            "created_at",
            advanced_alchemy.types.datetime.DateTimeUTC(timezone=True),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            advanced_alchemy.types.datetime.DateTimeUTC(timezone=True),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["complex_id"],
            ["complexes.id"],
            name=op.f("fk_news_complex_id_complexes"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_news")),
    )
    op.create_table(
        "floors",
        sa.Column(
            "block_id",
            sa.BigInteger().with_variant(sa.Integer(), "sqlite"),
            nullable=False,
        ),
        sa.Column("no", sa.SmallInteger(), nullable=True),
        sa.Column(
            "id", sa.BigInteger().with_variant(sa.Integer(), "sqlite"), nullable=False
        ),
        sa.Column(
            "created_at",
            advanced_alchemy.types.datetime.DateTimeUTC(timezone=True),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            advanced_alchemy.types.datetime.DateTimeUTC(timezone=True),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["block_id"],
            ["blocks.id"],
            name=op.f("fk_floors_block_id_blocks"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_floors")),
        sa.UniqueConstraint("block_id", "no", name="uq_floor_block_no"),
    )
    op.create_table(
        "sections",
        sa.Column(
            "block_id",
            sa.BigInteger().with_variant(sa.Integer(), "sqlite"),
            nullable=False,
        ),
        sa.Column("no", sa.SmallInteger(), nullable=True),
        sa.Column(
            "id", sa.BigInteger().with_variant(sa.Integer(), "sqlite"), nullable=False
        ),
        sa.Column(
            "created_at",
            advanced_alchemy.types.datetime.DateTimeUTC(timezone=True),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            advanced_alchemy.types.datetime.DateTimeUTC(timezone=True),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["block_id"],
            ["blocks.id"],
            name=op.f("fk_sections_block_id_blocks"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_sections")),
        sa.UniqueConstraint("block_id", "no", name="uq_section_block_no"),
    )
    op.create_table(
        "risers",
        sa.Column(
            "section_id",
            sa.BigInteger().with_variant(sa.Integer(), "sqlite"),
            nullable=False,
        ),
        sa.Column("no", sa.SmallInteger(), nullable=True),
        sa.Column(
            "id", sa.BigInteger().with_variant(sa.Integer(), "sqlite"), nullable=False
        ),
        sa.Column(
            "created_at",
            advanced_alchemy.types.datetime.DateTimeUTC(timezone=True),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            advanced_alchemy.types.datetime.DateTimeUTC(timezone=True),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["section_id"],
            ["sections.id"],
            name=op.f("fk_risers_section_id_sections"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_risers")),
        sa.UniqueConstraint("section_id", "no", name="uq_section_no"),
    )
    op.create_table(
        "apartments",
        sa.Column(
            "user_id",
            sa.BigInteger().with_variant(sa.Integer(), "sqlite"),
            nullable=False,
        ),
        sa.Column(
            "floor_id",
            sa.BigInteger().with_variant(sa.Integer(), "sqlite"),
            nullable=True,
        ),
        sa.Column(
            "riser_id",
            sa.BigInteger().with_variant(sa.Integer(), "sqlite"),
            nullable=True,
        ),
        sa.Column("address", sa.String(), nullable=False),
        sa.Column("district", sa.String(), nullable=False),
        sa.Column("microdistrict", sa.String(), nullable=False),
        sa.Column("longitude", sa.Numeric(precision=6, scale=3), nullable=False),
        sa.Column("latitude", sa.Numeric(precision=6, scale=3), nullable=False),
        sa.Column(
            "technology",
            sa.Enum(
                "BRICK",
                "PANEL",
                "AERATED_CONCRETE",
                "FRAME",
                name="apartment_technology_enum",
            ),
            nullable=False,
        ),
        sa.Column(
            "ownership_type",
            sa.Enum(
                "PRIVATE",
                "STATE",
                "MUNICIPAL",
                "LEASEHOLD",
                "LONG_TERM_LEASE",
                "UNDER_CONSTRUCTION_SALE",
                "NEW_BUILDING_COMMISSIONED",
                "SECONDARY_MARKET",
                "COOPERATIVE",
                "INHERITANCE",
                name="apartment_ownership_type_enum",
            ),
            nullable=False,
        ),
        sa.Column(
            "property_type",
            sa.Enum(
                "RESIDENTIAL",
                "COMMERCIAL",
                "INDUSTRIAL",
                "LAND",
                name="apartment_property_type_enum",
            ),
            nullable=False,
        ),
        sa.Column(
            "bedrooms",
            sa.Enum(
                "STUDIO",
                "ONE",
                "TWO",
                "THREE_OR_MORE",
                "DUPLEX",
                name="apartment_bedrooms_enum",
            ),
            nullable=False,
        ),
        sa.Column(
            "bathrooms",
            sa.Enum("SEPARATE", "COMBINED", name="apartment_bathrooms_enum"),
            nullable=False,
        ),
        sa.Column("kitchen_area", sa.Numeric(precision=3, scale=1), nullable=False),
        sa.Column(
            "heating",
            sa.Enum(
                "CENTRAL",
                "INDIVIDUAL_GAS",
                "INDIVIDUAL_ELECTRIC",
                "AUTONOMOUS",
                name="apartment_heating_enum",
            ),
            nullable=False,
        ),
        sa.Column("has_balcony_or_loggia", sa.Boolean(), nullable=False),
        sa.Column("has_mortgage", sa.Boolean(), nullable=False),
        sa.Column(
            "commission_to_agent",
            sa.Enum("LOW", "MEDIUM", "HIGH", name="apartment_commission_enum"),
            nullable=False,
        ),
        sa.Column(
            "condition",
            sa.Enum(
                "EXCELLENT",
                "GOOD",
                "SATISFACTORY",
                "NEEDS_RENOVATION",
                "BAD",
                name="apartment_condition_enum",
            ),
            nullable=False,
        ),
        sa.Column(
            "finishing",
            sa.Enum(
                "NO_FINISHING",
                "ROUGH",
                "PARTIALLY",
                "PRE",
                "FULLY",
                name="apartment_finishing_enum",
            ),
            nullable=False,
        ),
        sa.Column(
            "rooms",
            sa.Enum(
                "ONE",
                "TWO",
                "THREE",
                "FOUR",
                "FIVE",
                "SIX",
                "SEVEN",
                "EIGHT",
                "NINE",
                "TEN",
                name="apartment_rooms_enum",
            ),
            nullable=False,
        ),
        sa.Column("area", sa.Numeric(precision=4, scale=1), nullable=False),
        sa.Column(
            "call_method",
            sa.Enum("SMS", "PHONE", "PHONE_AND_SMS", name="apartment_call_method_enum"),
            nullable=False,
        ),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column("price", sa.Integer(), nullable=False),
        sa.Column("scheme", sa.String(), nullable=False),
        sa.Column(
            "id", sa.BigInteger().with_variant(sa.Integer(), "sqlite"), nullable=False
        ),
        sa.Column(
            "created_at",
            advanced_alchemy.types.datetime.DateTimeUTC(timezone=True),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            advanced_alchemy.types.datetime.DateTimeUTC(timezone=True),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["floor_id"],
            ["floors.id"],
            name=op.f("fk_apartments_floor_id_floors"),
            ondelete="SET NULL",
        ),
        sa.ForeignKeyConstraint(
            ["riser_id"],
            ["risers.id"],
            name=op.f("fk_apartments_riser_id_risers"),
            ondelete="SET NULL",
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
            name=op.f("fk_apartments_user_id_users"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_apartments")),
    )
    op.create_table(
        "apartments_gallery",
        sa.Column(
            "apartment_id",
            sa.BigInteger().with_variant(sa.Integer(), "sqlite"),
            nullable=False,
        ),
        sa.Column("photo", sa.String(), nullable=False),
        sa.Column("order", sa.SmallInteger(), nullable=True),
        sa.Column(
            "id", sa.BigInteger().with_variant(sa.Integer(), "sqlite"), nullable=False
        ),
        sa.Column(
            "created_at",
            advanced_alchemy.types.datetime.DateTimeUTC(timezone=True),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            advanced_alchemy.types.datetime.DateTimeUTC(timezone=True),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["apartment_id"],
            ["apartments.id"],
            name=op.f("fk_apartments_gallery_apartment_id_apartments"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_apartments_gallery")),
        sa.UniqueConstraint("apartment_id", "order", name="uq_apartment_order"),
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("apartments_gallery")
    op.drop_table("apartments")
    op.drop_table("risers")
    op.drop_table("sections")
    op.drop_table("floors")
    op.drop_table("news")
    op.drop_table("infrastructures")
    op.drop_table("formalization_and_payment_settings")
    op.drop_table("documents")
    op.drop_table("complexes_gallery")
    op.drop_table("blocks")
    op.drop_table("advantages")
    op.drop_table("subscriptions")
    op.drop_table("notification_settings")
    op.drop_table("contacts")
    op.drop_table("complexes")
    op.drop_table("blacklist")
    op.drop_table("balances")
    op.drop_table("agent_contacts")
    op.drop_table("users")
    op.drop_table("notary")
    # ### end Alembic commands ###
